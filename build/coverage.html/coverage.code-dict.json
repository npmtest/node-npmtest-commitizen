{"/home/travis/build/npmtest/node-npmtest-commitizen/test.js":"/* istanbul instrument in package npmtest_commitizen */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-commitizen/lib.npmtest_commitizen.js":"/* istanbul instrument in package npmtest_commitizen */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_commitizen = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_commitizen = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-commitizen/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-commitizen && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_commitizen */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_commitizen\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_commitizen.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_commitizen.rollup.js'] =\n            local.assetsDict['/assets.npmtest_commitizen.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_commitizen.__dirname + '/lib.npmtest_commitizen.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-commitizen/node_modules/commitizen/dist/index.js":"'use strict';\n\nvar commitizen = require('./commitizen');\nmodule.exports = commitizen;","/home/travis/build/npmtest/node-npmtest-commitizen/node_modules/commitizen/dist/commitizen.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.staging = exports.init = exports.configLoader = exports.commit = exports.cache = exports.adapter = undefined;\n\nvar _adapter = require('./commitizen/adapter');\n\nvar adapter = _interopRequireWildcard(_adapter);\n\nvar _cache = require('./commitizen/cache');\n\nvar cache = _interopRequireWildcard(_cache);\n\nvar _commit = require('./commitizen/commit');\n\nvar _commit2 = _interopRequireDefault(_commit);\n\nvar _configLoader = require('./commitizen/configLoader');\n\nvar configLoader = _interopRequireWildcard(_configLoader);\n\nvar _init = require('./commitizen/init');\n\nvar _init2 = _interopRequireDefault(_init);\n\nvar _staging = require('./commitizen/staging');\n\nvar staging = _interopRequireWildcard(_staging);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nexports.adapter = adapter;\nexports.cache = cache;\nexports.commit = _commit2.default;\nexports.configLoader = configLoader;\nexports.init = _init2.default;\nexports.staging = staging;","/home/travis/build/npmtest/node-npmtest-commitizen/node_modules/commitizen/dist/commitizen/adapter.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.resolveAdapterPath = exports.generateNpmInstallAdapterCommand = exports.getPrompter = exports.getNpmInstallStringMappings = exports.getNearestProjectRootDirectory = exports.getNearestNodeModulesDirectory = exports.addPathToAdapterConfig = undefined;\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nvar _path = require('path');\n\nvar _path2 = _interopRequireDefault(_path);\n\nvar _fs = require('fs');\n\nvar _fs2 = _interopRequireDefault(_fs);\n\nvar _findNodeModules = require('find-node-modules');\n\nvar _findNodeModules2 = _interopRequireDefault(_findNodeModules);\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _detectIndent = require('detect-indent');\n\nvar _detectIndent2 = _interopRequireDefault(_detectIndent);\n\nvar _shelljs = require('shelljs');\n\nvar _shelljs2 = _interopRequireDefault(_shelljs);\n\nvar _util = require('../common/util');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.addPathToAdapterConfig = addPathToAdapterConfig;\nexports.getNearestNodeModulesDirectory = getNearestNodeModulesDirectory;\nexports.getNearestProjectRootDirectory = getNearestProjectRootDirectory;\nexports.getNpmInstallStringMappings = getNpmInstallStringMappings;\nexports.getPrompter = getPrompter;\nexports.generateNpmInstallAdapterCommand = generateNpmInstallAdapterCommand;\nexports.resolveAdapterPath = resolveAdapterPath;\n\n/**\n * ADAPTER\n *\n * Adapter is generally responsible for actually installing adapters to an\n * end user's project. It does not perform checks to determine if there is\n * a previous commitizen adapter installed or if the proper fields were\n * provided. It defers that responsibility to init.\n */\n\n/**\n * Modifies the package.json, sets config.commitizen.path to the path of the adapter\n * Must be passed an absolute path to the cli's root\n */\n\nfunction addPathToAdapterConfig(sh, cliPath, repoPath, adapterNpmName) {\n\n  var commitizenAdapterConfig = {\n    config: {\n      commitizen: {\n        path: './node_modules/' + adapterNpmName\n      }\n    }\n  };\n\n  var packageJsonPath = _path2.default.join(getNearestProjectRootDirectory(), 'package.json');\n  var packageJsonString = _fs2.default.readFileSync(packageJsonPath, 'utf-8');\n  // tries to detect the indentation and falls back to a default if it can't\n  var indent = (0, _detectIndent2.default)(packageJsonString).indent || '  ';\n  var packageJsonContent = JSON.parse(packageJsonString);\n  var newPackageJsonContent = '';\n  if (_lodash2.default.get(packageJsonContent, 'config.commitizen.path') !== adapterNpmName) {\n    newPackageJsonContent = _lodash2.default.merge(packageJsonContent, commitizenAdapterConfig);\n  }\n  _fs2.default.writeFileSync(packageJsonPath, JSON.stringify(newPackageJsonContent, null, indent) + '\\n');\n}\n\n/**\n * Generates an npm install command given a map of strings and a package name\n */\nfunction generateNpmInstallAdapterCommand(stringMappings, adapterNpmName) {\n\n  // Start with an initial npm install command\n  var installAdapterCommand = 'npm install ' + adapterNpmName;\n\n  // Append the neccesary arguments to it based on user preferences\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = stringMappings.entries()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var _step$value = _slicedToArray(_step.value, 2),\n          key = _step$value[0],\n          value = _step$value[1];\n\n      if (value) {\n        installAdapterCommand = installAdapterCommand + ' ' + value;\n      }\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  return installAdapterCommand;\n}\n\n/**\n * Gets the nearest npm_modules directory\n */\nfunction getNearestNodeModulesDirectory(options) {\n\n  // Get the nearest node_modules directories to the current working directory\n  var nodeModulesDirectories = (0, _findNodeModules2.default)(options);\n\n  // Make sure we find a node_modules folder\n\n  /* istanbul ignore else */\n  if (nodeModulesDirectories && nodeModulesDirectories.length > 0) {\n    return nodeModulesDirectories[0];\n  } else {\n    console.error('Error: Could not locate node_modules in your project\\'s root directory. Did you forget to npm init or npm install?');\n  }\n}\n\n/**\n * Gets the nearest project root directory\n */\nfunction getNearestProjectRootDirectory(options) {\n  return _path2.default.join(process.cwd(), getNearestNodeModulesDirectory(options), '/../');\n}\n\n/**\n * Gets a map of arguments where the value is the corresponding npm strings\n */\nfunction getNpmInstallStringMappings(save, saveDev, saveExact, force) {\n  return new Map().set('save', save && !saveDev ? '--save' : undefined).set('saveDev', saveDev ? '--save-dev' : undefined).set('saveExact', saveExact ? '--save-exact' : undefined).set('force', force ? '--force' : undefined);\n}\n\n/**\n * Gets the prompter from an adapter given an adapter path\n */\nfunction getPrompter(adapterPath) {\n  // Resolve the adapter path\n  var resolvedAdapterPath = resolveAdapterPath(adapterPath);\n\n  // Load the adapter\n  var adapter = require(resolvedAdapterPath);\n\n  /* istanbul ignore next */\n  if (adapter && adapter.prompter && (0, _util.isFunction)(adapter.prompter)) {\n    return adapter.prompter;\n  } else if (adapter && adapter.default && adapter.default.prompter && (0, _util.isFunction)(adapter.default.prompter)) {\n    return adapter.default.prompter;\n  } else {\n    throw \"Could not find prompter method in the provided adapter module: \" + adapterPath;\n  }\n}\n\n/**\n * Given a resolvable module name or path, which can be a directory or file, will\n * return a located adapter path or will throw.\n */\nfunction resolveAdapterPath(inboundAdapterPath) {\n  // Check if inboundAdapterPath is a path or node module name\n  var parsed = _path2.default.parse(inboundAdapterPath);\n  var isPath = parsed.dir.length > 0 && parsed.dir.charAt(0) !== \"@\";\n\n  // Resolve from the root of the git repo if inboundAdapterPath is a path\n  var absoluteAdapterPath = isPath ? _path2.default.resolve(getGitRootPath(), inboundAdapterPath) : inboundAdapterPath;\n\n  try {\n    // try to resolve the given path\n    return require.resolve(absoluteAdapterPath);\n  } catch (error) {\n    error.message = \"Could not resolve \" + absoluteAdapterPath + \". \" + error.message;\n    throw error;\n  }\n}\n\nfunction getGitRootPath() {\n  return _shelljs2.default.exec('git rev-parse --show-toplevel').stdout.trim();\n}","/home/travis/build/npmtest/node-npmtest-commitizen/node_modules/commitizen/dist/common/util.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isInTest = exports.isString = exports.isFunction = exports.isArray = exports.getParsedPackageJsonFromPath = exports.getParsedJsonFromFile = exports.executeShellCommand = undefined;\n\nvar _fs = require('fs');\n\nvar _fs2 = _interopRequireDefault(_fs);\n\nvar _path = require('path');\n\nvar _path2 = _interopRequireDefault(_path);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.executeShellCommand = executeShellCommand;\nexports.getParsedJsonFromFile = getParsedJsonFromFile;\nexports.getParsedPackageJsonFromPath = getParsedPackageJsonFromPath;\nexports.isArray = isArray;\nexports.isFunction = isFunction;\nexports.isString = isString;\nexports.isInTest = isInTest;\n\n/**\n * Executes the command passed to it at the path requested\n * using the instance of shelljs passed in\n */\n\nfunction executeShellCommand(sh, path, installCommand) {\n  sh.cd(path);\n  sh.exec(installCommand);\n}\n\n/**\n * Gets the parsed contents of a json file\n */\nfunction getParsedJsonFromFile(filePath, fileName) {\n  var encoding = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'utf8';\n\n  try {\n    var packageJsonContents = _fs2.default.readFileSync(_path2.default.join(filePath, fileName), encoding);\n    return JSON.parse(packageJsonContents);\n  } catch (e) {\n    console.error(e);\n  }\n}\n\n/**\n * A helper method for getting the contents of package.json at a given path\n */\nfunction getParsedPackageJsonFromPath(path) {\n  return getParsedJsonFromFile(path, 'package.json');\n}\n\n/**\n * Test if the passed argument is an array\n */\nfunction isArray(arr) {\n  if (typeof arr === \"undefined\") {\n    return false;\n  } else if (arr === null) {\n    return false;\n  } else {\n    return arr.constructor === Array;\n  }\n}\n\n/**\n * Test if the passed argument is a function\n */\nfunction isFunction(functionToCheck) {\n  if (typeof functionToCheck === \"undefined\") {\n    return false;\n  } else if (functionToCheck === null) {\n    return false;\n  } else {\n    var getType = {};\n    return functionToCheck && getType.toString.call(functionToCheck) === '[object Function]';\n  }\n}\n\n/**\n * Test if the passed argument is a string\n */\nfunction isString(str) {\n  if (typeof str === \"undefined\") {\n    return false;\n  } else if (str === null) {\n    return false;\n  } else {\n    return Object.prototype.toString.call(str) === '[object String]';\n  }\n}\n\nfunction isInTest() {\n  return typeof global.it === 'function';\n}","/home/travis/build/npmtest/node-npmtest-commitizen/node_modules/commitizen/dist/commitizen/cache.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.setCacheValueSync = exports.readCacheSync = exports.getCacheValueSync = undefined;\n\nvar _fs = require('fs');\n\nvar _fs2 = _interopRequireDefault(_fs);\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nexports.getCacheValueSync = getCacheValueSync;\nexports.readCacheSync = readCacheSync;\nexports.setCacheValueSync = setCacheValueSync;\n\n/**\n * Reads the entire cache\n */\n\nfunction readCacheSync(cachePath) {\n  return JSON.parse(_fs2.default.readFileSync(cachePath, 'utf8'));\n}\n\n/**\n * Sets a cache value and writes the file to disk\n */\nfunction setCacheValueSync(cachePath, key, value) {\n  var originalCache;\n  try {\n    originalCache = readCacheSync(cachePath);\n  } catch (e) {\n    originalCache = {};\n  }\n  var newCache = _lodash2.default.assign(originalCache, _defineProperty({}, key, value));\n  _fs2.default.writeFileSync(cachePath, JSON.stringify(newCache, null, '  '));\n  return newCache;\n}\n\n/**\n * Gets a single value from the cache given a key\n */\nfunction getCacheValueSync(cachePath, repoPath) {\n  try {\n    var cache = readCacheSync(cachePath);\n    return cache[repoPath];\n  } catch (e) {\n    return;\n  }\n}","/home/travis/build/npmtest/node-npmtest-commitizen/node_modules/commitizen/dist/commitizen/commit.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _path = require('path');\n\nvar _path2 = _interopRequireDefault(_path);\n\nvar _dedent = require('dedent');\n\nvar _dedent2 = _interopRequireDefault(_dedent);\n\nvar _cachedir = require('cachedir');\n\nvar _cachedir2 = _interopRequireDefault(_cachedir);\n\nvar _fsExtra = require('fs-extra');\n\nvar _git = require('../git');\n\nvar _cache = require('./cache');\n\nvar cache = _interopRequireWildcard(_cache);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = commit;\n\n/**\n * Takes all of the final inputs needed in order to make dispatch a git commit\n */\n\nfunction dispatchGitCommit(sh, repoPath, template, options, overrideOptions, done) {\n  // Commit the user input -- side effect that we'll test\n  (0, _git.commit)(sh, repoPath, template, _extends({}, options, overrideOptions), function (error) {\n    done(error, template);\n  });\n}\n\n/**\n * Asynchronously commits files using commitizen\n */\nfunction commit(sh, inquirer, repoPath, prompter, options, done) {\n  var cacheDirectory = (0, _cachedir2.default)('commitizen');\n  var cachePath = _path2.default.join(cacheDirectory, 'commitizen.json');\n\n  (0, _fsExtra.ensureDir)(cacheDirectory, function (error) {\n    if (error) {\n      console.error(\"Couldn't create commitizen cache directory: \", error);\n      // TODO: properly handle error?\n    } else {\n      if (options.retryLastCommit) {\n\n        console.log('Retrying last commit attempt.');\n\n        // We want to use the last commit instead of the current commit,\n        // so lets override some options using the values from cache.\n\n        var _cache$getCacheValueS = cache.getCacheValueSync(cachePath, repoPath),\n            retryOptions = _cache$getCacheValueS.options,\n            retryOverrideOptions = _cache$getCacheValueS.overrideOptions,\n            retryTemplate = _cache$getCacheValueS.template;\n\n        dispatchGitCommit(sh, repoPath, retryTemplate, retryOptions, retryOverrideOptions, done);\n      } else {\n        // Get user input -- side effect that is hard to test\n        prompter(inquirer, function (error, template, overrideOptions) {\n          // Allow adapters to error out\n          // (error: Error?, template: String, overrideOptions: Object)\n          if (!(error instanceof Error)) {\n            overrideOptions = template;\n            template = error;\n            error = null;\n          }\n\n          if (error) {\n            return done(error);\n          }\n\n          // We don't want to add retries to the cache, only actual commands\n          cache.setCacheValueSync(cachePath, repoPath, { template: template, options: options, overrideOptions: overrideOptions });\n          dispatchGitCommit(sh, repoPath, template, options, overrideOptions, done);\n        });\n      }\n    }\n  });\n}","/home/travis/build/npmtest/node-npmtest-commitizen/node_modules/commitizen/dist/git.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.log = exports.init = exports.commit = exports.addPath = undefined;\n\nvar _add = require('./git/add');\n\nvar _commit = require('./git/commit');\n\nvar _init = require('./git/init');\n\nvar _log = require('./git/log');\n\nexports.addPath = _add.addPath;\nexports.commit = _commit.commit;\nexports.init = _init.init;\nexports.log = _log.log;","/home/travis/build/npmtest/node-npmtest-commitizen/node_modules/commitizen/dist/git/add.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.addPath = addPath;\n\n/**\n * Synchronously adds a path to git staging\n */\n\nfunction addPath(sh, repoPath) {\n  sh.cd(repoPath);\n  sh.exec('git add .');\n}","/home/travis/build/npmtest/node-npmtest-commitizen/node_modules/commitizen/dist/git/commit.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.commit = undefined;\n\nvar _os = require('os');\n\nvar _os2 = _interopRequireDefault(_os);\n\nvar _child_process = require('child_process');\n\nvar _dedent = require('dedent');\n\nvar _dedent2 = _interopRequireDefault(_dedent);\n\nvar _util = require('../common/util');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nexports.commit = commit;\n\n/**\n * Asynchronously git commit at a given path with a message\n */\n\nfunction commit(sh, repoPath, message, options, done) {\n  var called = false;\n  var args = ['commit', '-m', (0, _dedent2.default)(message)].concat(_toConsumableArray(options.args || []));\n  var child = (0, _child_process.spawn)('git', args, {\n    cwd: repoPath,\n    stdio: options.quiet ? 'ignore' : 'inherit'\n  });\n\n  child.on('error', function (err) {\n    if (called) return;\n    called = true;\n\n    done(err);\n  });\n\n  child.on('exit', function (code, signal) {\n    if (called) return;\n    called = true;\n\n    if (code) {\n      done(Object.assign(new Error('git exited with error code ' + code), { code: code, signal: signal }));\n    } else {\n      done(null);\n    }\n  });\n}","/home/travis/build/npmtest/node-npmtest-commitizen/node_modules/commitizen/dist/git/init.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.init = init;\n\n/**\n * Synchronously creates a new git repo at a path\n */\n\nfunction init(sh, repoPath) {\n  sh.cd(repoPath);\n  sh.exec('git init');\n}","/home/travis/build/npmtest/node-npmtest-commitizen/node_modules/commitizen/dist/git/log.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.log = undefined;\n\nvar _child_process = require('child_process');\n\nexports.log = log;\n\n/**\n * Asynchronously gets the git log output\n */\n\nfunction log(repoPath, done) {\n  (0, _child_process.exec)('git log', {\n    maxBuffer: Infinity,\n    cwd: repoPath\n  }, function (error, stdout, stderr) {\n    if (error) {\n      throw error;\n    }\n    done(stdout);\n  });\n}","/home/travis/build/npmtest/node-npmtest-commitizen/node_modules/commitizen/dist/commitizen/configLoader.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.load = undefined;\n\nvar _configLoader = require('../configLoader');\n\nexports.load = load;\n\n// Configuration sources in priority order.\n\nvar configs = ['package.json', '.czrc', '.cz.json'];\n\nfunction load(config, cwd) {\n  return (0, _configLoader.loader)(configs, config, cwd);\n}","/home/travis/build/npmtest/node-npmtest-commitizen/node_modules/commitizen/dist/configLoader.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.loader = exports.getNormalizedConfig = exports.getContent = exports.findup = undefined;\n\nvar _findup = require('./configLoader/findup');\n\nvar _findup2 = _interopRequireDefault(_findup);\n\nvar _getContent = require('./configLoader/getContent');\n\nvar _getContent2 = _interopRequireDefault(_getContent);\n\nvar _getNormalizedConfig = require('./configLoader/getNormalizedConfig');\n\nvar _getNormalizedConfig2 = _interopRequireDefault(_getNormalizedConfig);\n\nvar _loader = require('./configLoader/loader');\n\nvar _loader2 = _interopRequireDefault(_loader);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.findup = _findup2.default;\nexports.getContent = _getContent2.default;\nexports.getNormalizedConfig = _getNormalizedConfig2.default;\nexports.loader = _loader2.default;","/home/travis/build/npmtest/node-npmtest-commitizen/node_modules/commitizen/dist/configLoader/findup.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _path = require('path');\n\nvar _path2 = _interopRequireDefault(_path);\n\nvar _glob = require('glob');\n\nvar _glob2 = _interopRequireDefault(_glob);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = findup;\n\n// Before, \"findup-sync\" package was used,\n// but it does not provide filter callback\n\nfunction findup(patterns, options, fn) {\n    /* jshint -W083 */\n\n    var lastpath;\n    var file;\n\n    options = Object.create(options);\n    options.maxDepth = 1;\n    options.cwd = _path2.default.resolve(options.cwd);\n\n    do {\n        file = patterns.filter(function (pattern) {\n            var configPath = _glob2.default.sync(pattern, options)[0];\n\n            if (configPath) {\n                return fn(_path2.default.join(options.cwd, configPath));\n            }\n        })[0];\n\n        if (file) {\n            return _path2.default.join(options.cwd, file);\n        }\n\n        lastpath = options.cwd;\n        options.cwd = _path2.default.resolve(options.cwd, '..');\n    } while (options.cwd !== lastpath);\n}","/home/travis/build/npmtest/node-npmtest-commitizen/node_modules/commitizen/dist/configLoader/getContent.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _fs = require('fs');\n\nvar _fs2 = _interopRequireDefault(_fs);\n\nvar _path = require('path');\n\nvar _path2 = _interopRequireDefault(_path);\n\nvar _pathExists = require('path-exists');\n\nvar _stripJsonComments = require('strip-json-comments');\n\nvar _stripJsonComments2 = _interopRequireDefault(_stripJsonComments);\n\nvar _configLoader = require('../configLoader');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = getConfigContent;\n\n/**\n * Read the content of a configuration file\n * - if not js or json: strip any comments\n * - if js or json: require it\n * @param {String} configPath - full path to configuration file\n * @return {Object}\n */\n\nfunction readConfigContent(configPath) {\n  var parsedPath = _path2.default.parse(configPath);\n  var isRcFile = parsedPath.ext !== '.js' && parsedPath.ext !== '.json';\n  var jsonString = _fs2.default.readFileSync(configPath, 'utf-8');\n  var parse = isRcFile ? function (contents) {\n    return JSON.parse((0, _stripJsonComments2.default)(contents));\n  } : function (contents) {\n    return JSON.parse(contents);\n  };\n\n  try {\n    var parsed = parse(jsonString);\n\n    Object.defineProperty(parsed, 'configPath', {\n      value: configPath\n    });\n\n    return parsed;\n  } catch (error) {\n    error.message = ['Parsing JSON at ' + configPath + ' for commitizen config failed:', error.mesasge].join('\\n');\n\n    throw error;\n  }\n}\n\n/**\n * Get content of the configuration file\n * @param {String} configPath - partial path to configuration file\n * @param {String} directory - directory path which will be joined with config argument\n * @return {Object}\n */\nfunction getConfigContent(configPath, baseDirectory) {\n  if (!configPath) {\n    return;\n  }\n\n  var resolvedPath = _path2.default.resolve(baseDirectory, configPath);\n  var configBasename = _path2.default.basename(resolvedPath);\n\n  if (!(0, _pathExists.sync)(resolvedPath)) {\n    return (0, _configLoader.getNormalizedConfig)(resolvedPath);\n  }\n\n  var content = readConfigContent(resolvedPath);\n  return (0, _configLoader.getNormalizedConfig)(configBasename, content);\n};","/home/travis/build/npmtest/node-npmtest-commitizen/node_modules/commitizen/dist/configLoader/getNormalizedConfig.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = getNormalizedConfig;\n\n// Given a config and content, plucks the actual\n// settings that we're interested in\n\nfunction getNormalizedConfig(config, content) {\n\n  if (content && config === 'package.json') {\n\n    // PACKAGE.JSON\n\n    // Use the npm config key, be good citizens\n    if (content.config && content.config.commitizen) {\n      return content.config.commitizen;\n    } else if (content.czConfig) {\n      // Old method, will be deprecated in 3.0.0\n\n      // Suppress during test\n      if (typeof global.it !== 'function') {\n        console.error(\"\\n********\\nWARNING: This repository's package.json is using czConfig. czConfig will be deprecated in Commitizen 3. \\nPlease use this instead:\\n{\\n  \\\"config\\\": {\\n    \\\"commitizen\\\": {\\n      \\\"path\\\": \\\"./path/to/adapter\\\"\\n    }\\n  }\\n}\\nFor more information, see: http://commitizen.github.io/cz-cli/\\n********\\n\");\n      }\n      return content.czConfig;\n    }\n  } else {\n    // .cz.json or .czrc \n    return content;\n  }\n}","/home/travis/build/npmtest/node-npmtest-commitizen/node_modules/commitizen/dist/configLoader/loader.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _path = require('path');\n\nvar _path2 = _interopRequireDefault(_path);\n\nvar _configLoader = require('../configLoader');\n\nvar _util = require('../common/util.js');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = loader;\n\n/**\n * Command line config helpers\n * Shamelessly ripped from with slight modifications:\n * https://github.com/jscs-dev/node-jscs/blob/master/lib/cli-config.js\n */\n\n/**\n * Get content of the configuration file\n * @param {String} config - partial path to configuration file\n * @param {String} [cwd = process.cwd()] - directory path which will be joined with config argument\n * @return {Object|undefined}\n */\n\nfunction loader(configs, config, cwd) {\n    var content;\n    var directory = cwd || process.cwd();\n\n    // If config option is given, attempt to load it\n    if (config) {\n        return (0, _configLoader.getContent)(config, directory);\n    }\n\n    content = (0, _configLoader.getContent)((0, _configLoader.findup)(configs, { nocase: true, cwd: directory }, function (configPath) {\n        if (_path2.default.basename(configPath) === 'package.json') {\n            // return !!this.getContent(configPath);\n        }\n\n        return true;\n    }));\n\n    if (content) {\n        return content;\n    }\n    /* istanbul ignore if */\n    if (!(0, _util.isInTest)()) {\n        // Try to load standard configs from home dir\n        var directoryArr = [process.env.USERPROFILE, process.env.HOMEPATH, process.env.HOME];\n        for (var i = 0, dirLen = directoryArr.length; i < dirLen; i++) {\n            if (!directoryArr[i]) {\n                continue;\n            }\n\n            for (var j = 0, len = configs.length; j < len; j++) {\n                content = (0, _configLoader.getContent)(configs[j], directoryArr[i]);\n\n                if (content) {\n                    return content;\n                }\n            }\n        }\n    }\n}","/home/travis/build/npmtest/node-npmtest-commitizen/node_modules/commitizen/dist/commitizen/init.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _path = require('path');\n\nvar _path2 = _interopRequireDefault(_path);\n\nvar _configLoader = require('./configLoader');\n\nvar configLoader = _interopRequireWildcard(_configLoader);\n\nvar _util = require('../common/util');\n\nvar _adapter = require('./adapter');\n\nvar adapter = _interopRequireWildcard(_adapter);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar addPathToAdapterConfig = adapter.addPathToAdapterConfig,\n    generateNpmInstallAdapterCommand = adapter.generateNpmInstallAdapterCommand,\n    getNpmInstallStringMappings = adapter.getNpmInstallStringMappings;\nexports.default = init;\n\n\nvar CLI_PATH = _path2.default.normalize(__dirname + '/../../');\n\n/**\n * CZ INIT\n * \n * Init is generally responsible for initializing an adapter in\n * a user's project. The goal is to be able to run \n * `commitizen init` and be prompted for certain fields which\n * will help you install the proper adapter for your project.\n * \n * Init does not actually create the adapter (it defers to adapter\n * for this). Instead, it is specifically designed to help gather\n * and validate the information needed to install the adapter\n * properly without interfering with a previous adapter config.\n */\n\n/**\n * The defaults for init\n */\nvar defaultInitOptions = {\n  save: false,\n  saveDev: true,\n  saveExact: false,\n  force: false\n};\n\n/**\n * Runs npm install for the adapter then modifies the config.commitizen as needed\n */\nfunction init(sh, repoPath, adapterNpmName) {\n  var _ref = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : defaultInitOptions,\n      _ref$save = _ref.save,\n      save = _ref$save === undefined ? false : _ref$save,\n      _ref$saveDev = _ref.saveDev,\n      saveDev = _ref$saveDev === undefined ? true : _ref$saveDev,\n      _ref$saveExact = _ref.saveExact,\n      saveExact = _ref$saveExact === undefined ? false : _ref$saveExact,\n      _ref$force = _ref.force,\n      force = _ref$force === undefined ? false : _ref$force;\n\n  // Don't let things move forward if required args are missing\n  checkRequiredArguments(sh, repoPath, adapterNpmName);\n\n  // Move to the correct directory so we can run commands\n  sh.cd(repoPath);\n\n  // Load the current adapter config\n  var adapterConfig = loadAdapterConfig();\n\n  // Get the npm string mappings based on the arguments provided\n  var stringMappings = getNpmInstallStringMappings(save, saveDev, saveExact, force);\n\n  // Generate a string that represents the npm install command\n  var installAdapterCommand = generateNpmInstallAdapterCommand(stringMappings, adapterNpmName);\n\n  // Check for previously installed adapters\n  if (adapterConfig && adapterConfig.path && adapterConfig.path.length > 0) {\n\n    // console.log(`\n    //   Previous adapter detected! \n    // `);\n\n    if (!force) {\n\n      // console.log(`\n      //   Previous adapter detected! \n      // `);\n\n      throw 'A previous adapter is already configured. Use --force to override';\n    } else {\n      // Override it\n      try {\n        (0, _util.executeShellCommand)(sh, repoPath, installAdapterCommand);\n        addPathToAdapterConfig(sh, CLI_PATH, repoPath, adapterNpmName);\n      } catch (e) {\n        console.error(e);\n      }\n    }\n  } else {\n\n    // console.log(`\n    //   No previous adapter was detected \n    // `); \n\n    try {\n\n      (0, _util.executeShellCommand)(sh, repoPath, installAdapterCommand);\n      addPathToAdapterConfig(sh, CLI_PATH, repoPath, adapterNpmName);\n    } catch (e) {\n      console.error(e);\n    }\n  }\n}\n\n/**\n * Checks to make sure that the required arguments are passed\n * Throws an exception if any are not.\n */\nfunction checkRequiredArguments(sh, path, adapterNpmName) {\n  if (!sh) {\n    throw \"You must pass an instance of shelljs when running init.\";\n  }\n  if (!path) {\n    throw \"Path is required when running init.\";\n  }\n  if (!adapterNpmName) {\n    throw \"The adapter's npm name is required when running init.\";\n  }\n}\n\n/**\n * CONFIG\n * Loads and returns the adapter config at key config.commitizen, if it exists\n */\nfunction loadAdapterConfig() {\n  var config = configLoader.load();\n  if (config) {\n    return config;\n  } else {\n    return;\n  }\n}","/home/travis/build/npmtest/node-npmtest-commitizen/node_modules/commitizen/dist/commitizen/staging.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isClean = undefined;\n\nvar _child_process = require('child_process');\n\nexports.isClean = isClean;\n\n/**\n * Asynchrounously determines if the staging area is clean\n */\n\nfunction isClean(repoPath, done) {\n  (0, _child_process.exec)('git diff --cached --name-only', {\n    maxBuffer: Infinity,\n    cwd: repoPath || process.cwd()\n  }, function (error, stdout) {\n    if (error) {\n      return done(error);\n    }\n    var output = stdout || '';\n    done(null, output.trim().length === 0);\n  });\n}","/home/travis/build/npmtest/node-npmtest-commitizen/node_modules/commitizen/bin/commitizen.js":"\nrequire('../dist/cli/commitizen.js').bootstrap();\n","/home/travis/build/npmtest/node-npmtest-commitizen/node_modules/commitizen/dist/cli/commitizen.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.bootstrap = undefined;\n\nvar _commitizen = require('../commitizen');\n\nvar _parsers = require('./parsers');\n\nvar _shelljs = require('shelljs');\n\nvar sh = _interopRequireWildcard(_shelljs);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nvar parse = _parsers.commitizen.parse;\nexports.bootstrap = bootstrap;\n\n/**\n * This is the main cli entry point.\n * environment may be used for debugging.\n */\n\nfunction bootstrap() {\n  var environment = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n\n  // Get cli args\n  var rawGitArgs = process.argv.slice(2, process.argv.length);\n\n  // Parse the args\n  var parsedArgs = parse(rawGitArgs);\n  var command = parsedArgs._[0];\n\n  // Do actions based on commands\n  if (command === \"init\") {\n    var adapterNpmName = parsedArgs._[1];\n    if (adapterNpmName) {\n      console.log('Attempting to initialize using the npm package ' + adapterNpmName);\n      try {\n        (0, _commitizen.init)(sh, process.cwd(), adapterNpmName, parsedArgs);\n      } catch (e) {\n        console.error('Error: ' + e);\n      }\n    } else {\n      console.error('Error: You must provide an adapter name as the second argument.');\n    }\n  } else {\n    console.log('\\n    \\n    Commitizen has two command line tools:\\n    \\n      1) commitizen -- used for installing adapters into your project\\n      2) git-cz     -- used for making commits according to convention\\n                       note: you can run \\'git cz\\' if installed with -g\\n    \\n    Generally if you\\'re using someone else\\'s repo and they\\'ve already set up an\\n    adapter, you\\'re going to just be running:\\n    \\n         git-cz\\n    \\n    However, if you create a new repo and you want to make it easier for future \\n    contributors to follow your commit message conventions using commitizen then\\n    you\\'ll need to run a command like this one to add this adapter to your config:\\n        \\n         commitizen init cz-conventional-changelog --save\\n        \\n    You should swap out cz-conventional-changelog for the NPM package name of the\\n    adapter you wish you install in your project\\'s package.json.\\n    \\n    Detailed usage:\\n      \\n      1) commitizen <sub-command>\\n    \\n         init <adapter-npm-name> [args]\\n        \\n           description: Install a commitizen adapter from npm and adds it to your\\n                        config.commitizen in your package.json file.\\n        \\n           args:\\n             --save         Install the adapter to package.json dependencies \\n             --save-dev     Install the adapter to devDependencies\\n             --save-exact   Install an exact version instead of a range\\n             --force        Force install the adapter, even if a previous one exists.\\n             \\n      2) git-cz <any regular git commit arguments>\\n      \\n          description: Runs the commitizen prompter, asking you questions so that you\\n                       follow the commit conventions of the repository of the current \\n                       directory.\\n                       \\n                       note: git-cz may even be run as \\'git cz\\' if installed with -g.\\n    \\n    ');\n  }\n}","/home/travis/build/npmtest/node-npmtest-commitizen/node_modules/commitizen/dist/cli/parsers.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.gitCz = exports.commitizen = undefined;\n\nvar _commitizen = require('./parsers/commitizen');\n\nvar commitizen = _interopRequireWildcard(_commitizen);\n\nvar _gitCz = require('./parsers/git-cz');\n\nvar gitCz = _interopRequireWildcard(_gitCz);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nexports.commitizen = commitizen;\nexports.gitCz = gitCz;","/home/travis/build/npmtest/node-npmtest-commitizen/node_modules/commitizen/dist/cli/parsers/commitizen.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.parse = undefined;\n\nvar _minimist = require('minimist');\n\nvar _minimist2 = _interopRequireDefault(_minimist);\n\nvar _util = require('../../common/util');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.parse = parse;\n\n/**\n * Takes args, parses with minimist and some ugly vudoo, returns output\n * \n * TODO: Aww shit this is ugly. Rewrite with mega leet tests plz, kthnx.\n */\n\nfunction parse(rawGitArgs) {\n\n  var args = (0, _minimist2.default)(rawGitArgs, {\n    boolean: true\n  });\n\n  return args;\n}","/home/travis/build/npmtest/node-npmtest-commitizen/node_modules/commitizen/dist/cli/parsers/git-cz.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.parse = undefined;\n\nvar _minimist = require('minimist');\n\nvar _minimist2 = _interopRequireDefault(_minimist);\n\nvar _util = require('../../common/util');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.parse = parse;\n\n\nvar reShortMessage = /^-([a-zA-Z]*)m(.*)$/;\nvar reLongMessage = /^--message(=.*)?$/;\n\n/**\n * Strip message declaration from git arguments\n */\nfunction parse(rawGitArgs) {\n  var result = [];\n  var skipNext = false;\n\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = rawGitArgs[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var arg = _step.value;\n\n      var match = void 0;\n\n      if (skipNext) {\n        skipNext = false;\n        continue;\n      }\n\n      match = reShortMessage.exec(arg);\n\n      if (match) {\n        if (match[1]) {\n          result.push('-' + match[1]);\n        }\n\n        if (!match[2]) {\n          skipNext = true;\n        }\n\n        continue;\n      }\n\n      match = reLongMessage.exec(arg);\n\n      if (match) {\n        if (!match[1]) {\n          skipNext = true;\n        }\n\n        continue;\n      }\n\n      result.push(arg);\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  return result;\n}","/home/travis/build/npmtest/node-npmtest-commitizen/node_modules/commitizen/bin/git-cz.js":"var path = require('path');\nrequire('../dist/cli/git-cz.js').bootstrap({\n  cliPath: path.join(__dirname, '../')\n});\n","/home/travis/build/npmtest/node-npmtest-commitizen/node_modules/commitizen/dist/cli/git-cz.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.bootstrap = undefined;\n\nvar _commitizen = require('../commitizen');\n\nvar _strategies = require('./strategies');\n\nexports.bootstrap = bootstrap;\n\n/**\n * This is the main cli entry point.\n * environment may be used for debugging.\n */\n\nfunction bootstrap() {\n  var environment = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n\n  // Get cli args\n  var rawGitArgs = process.argv.slice(2, process.argv.length);\n\n  var adapterConfig = environment.config || _commitizen.configLoader.load();\n\n  // Choose a strategy based on the existance the adapter config\n  if (typeof adapterConfig !== 'undefined') {\n    // This tells commitizen we're in business\n    (0, _strategies.gitCz)(rawGitArgs, environment, adapterConfig);\n  } else {\n    // This tells commitizen that it is not needed, just use git\n    (0, _strategies.git)(rawGitArgs, environment);\n  }\n}","/home/travis/build/npmtest/node-npmtest-commitizen/node_modules/commitizen/dist/cli/strategies.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.gitCz = exports.git = undefined;\n\nvar _git = require('./strategies/git');\n\nvar _git2 = _interopRequireDefault(_git);\n\nvar _gitCz = require('./strategies/git-cz');\n\nvar _gitCz2 = _interopRequireDefault(_gitCz);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.git = _git2.default;\nexports.gitCz = _gitCz2.default;","/home/travis/build/npmtest/node-npmtest-commitizen/node_modules/commitizen/dist/cli/strategies/git.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _child_process = require('child_process');\n\nvar _child_process2 = _interopRequireDefault(_child_process);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = git;\n\n// We don't have a config, so either we use raw args to try to commit\n// or if debug is enabled then we do a strict check for a config file.\n\nfunction git(rawGitArgs, environment) {\n  if (environment.debug === true) {\n    console.error('COMMITIZEN DEBUG: No git-cz friendly config was detected. I looked for .czrc, .cz.json, or czConfig in package.json.');\n  } else {\n    var vanillaGitArgs = [\"commit\"].concat(rawGitArgs);\n\n    var child = _child_process2.default.spawn('git', vanillaGitArgs, {\n      stdio: 'inherit'\n    });\n\n    child.on('error', function (e, code) {\n      console.error(e);\n      throw e;\n    });\n  }\n}","/home/travis/build/npmtest/node-npmtest-commitizen/node_modules/commitizen/dist/cli/strategies/git-cz.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _fs = require('fs');\n\nvar _fs2 = _interopRequireDefault(_fs);\n\nvar _path = require('path');\n\nvar _path2 = _interopRequireDefault(_path);\n\nvar _shelljs = require('shelljs');\n\nvar _shelljs2 = _interopRequireDefault(_shelljs);\n\nvar _inquirer = require('inquirer');\n\nvar _inquirer2 = _interopRequireDefault(_inquirer);\n\nvar _findRoot = require('find-root');\n\nvar _findRoot2 = _interopRequireDefault(_findRoot);\n\nvar _util = require('../../common/util');\n\nvar _parsers = require('../parsers');\n\nvar _commitizen = require('../../commitizen');\n\nvar _git = require('../../git');\n\nvar _git2 = require('./git');\n\nvar gitStrategy = _interopRequireWildcard(_git2);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// destructure for shorter apis\nvar parse = _parsers.gitCz.parse;\nvar getPrompter = _commitizen.adapter.getPrompter,\n    resolveAdapterPath = _commitizen.adapter.resolveAdapterPath;\nvar isClean = _commitizen.staging.isClean;\nexports.default = gitCz;\n\n\nfunction gitCz(rawGitArgs, environment, adapterConfig) {\n\n  // See if any override conditions exist.\n\n  // In these very specific scenarios we may want to use a different\n  // commit strategy than git-cz. For example, in the case of --amend\n  var parsedCommitizenArgs = _parsers.commitizen.parse(rawGitArgs);\n\n  if (parsedCommitizenArgs.a) {\n    // console.log('override -a in place');\n    (0, _git.addPath)(_shelljs2.default, process.cwd());\n  }\n\n  if (parsedCommitizenArgs.amend) {\n    // console.log('override --amend in place');\n    gitStrategy.default(rawGitArgs, environment);\n    return;\n  }\n\n  // Now, if we've made it past overrides, proceed with the git-cz strategy\n  var parsedGitCzArgs = parse(rawGitArgs);\n\n  // Determine if we need to process this commit as a retry instead of a\n  // normal commit.\n  var retryLastCommit = rawGitArgs && rawGitArgs[0] === '--retry';\n\n  var resolvedAdapterConfigPath = resolveAdapterPath(adapterConfig.path);\n  var resolvedAdapterRootPath = (0, _findRoot2.default)(resolvedAdapterConfigPath);\n  var prompter = getPrompter(adapterConfig.path);\n\n  isClean(process.cwd(), function (error, stagingIsClean) {\n    if (error) {\n      throw error;\n    }\n\n    if (stagingIsClean) {\n      throw new Error('No files added to staging! Did you forget to run git add?');\n    }\n\n    // OH GOD IM SORRY FOR THIS SECTION\n    var adapterPackageJson = (0, _util.getParsedPackageJsonFromPath)(resolvedAdapterRootPath);\n    var cliPackageJson = (0, _util.getParsedPackageJsonFromPath)(environment.cliPath);\n    console.log('cz-cli@' + cliPackageJson.version + ', ' + adapterPackageJson.name + '@' + adapterPackageJson.version + '\\n');\n    (0, _commitizen.commit)(_shelljs2.default, _inquirer2.default, process.cwd(), prompter, {\n      args: parsedGitCzArgs,\n      disableAppendPaths: true,\n      emitData: true,\n      quiet: false,\n      retryLastCommit: retryLastCommit\n    }, function (error) {\n      if (error) {\n        throw error;\n      }\n    });\n  });\n}"}